<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use App\Http\Resources\{{ model }}Resource;
use {{ namespacedModel }};
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use {{ namespacedRequests }}
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Validation\Rule;

class {{ class }} extends Controller
{
    public function index(Request $request): JsonResource|JsonResponse
    {
        $filters = $request->validated();

        ${{ modelVariable }} = {{ model }}::query()
            ->when(
                isset($filters['ids']),
                fn (Builder $query) => $query->whereIn('id', $filters['ids'])
            )
            ->when(
                isset($filters['sort_by']),
                fn (Builder $query) => $query->orderBy(
                    $filters['sort_by'],
                    $filters['sort_direction'] ?? 'asc'
                )
            )
            ->when(
                isset($filters['all']),
                fn (Builder $query) => $query->get(),
                fn (Builder $query) => (
                    $query->paginate(
                        request('per_page', PAGINATION_PER_PAGE)
                    )
                        ->appends($filters)
                ),
            );

        return {{ model }}Resource::collection(${{ modelVariable }});
    }

    public function store({{ storeRequest }} $request): JsonResponse
    {
        $data = $request->validated();
        ${{ modelVariable }} = {{ model }}::create($data);

        return response()->success([
            {{ model }}::getResourceLabel() => {{ model }}Resource::make(${{ modelVariable }}),
        ]);
    }

    public function show({{ model }} ${{ modelVariable }}): JsonResource
    {
        return {{ model }}Resource::make(${{ modelVariable }});
    }

    public function update({{ updateRequest }} $request, {{ model }} ${{ modelVariable }}): JsonResponse
    {
        $patchData = $request->validated();
        $isUpdated = ${{ modelVariable }}->update($patchData);

        if (!$isUpdated) {
            return response()->error();
        }

        return response()->success([
            'updated_data' => $patchData,
        ]);
    }

    public function destroy({{ model }} ${{ modelVariable }}): JsonResponse
    {
        $isDeleted = ${{ modelVariable }}->delete();

        if (!$isDeleted) {
            return response()->error();
        }

        return response()->success();
    }
}
